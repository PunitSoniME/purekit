import predicateType from '../helpers/predicateType';
import prepareObject, { prepareObjectTypes } from '../helpers/prepareObject';
import { identity } from '../util';

/**
 *
 * @param collection  * Creates an object composed of keys generated from the results of running each element of the
 * given array through the given predicate. The corresponding value of each key is an array of elements
 * that have the key generated by the predicate.
 *
 * @param {Array} collection - The collection to iterate over.
 * @param {Function} [predicate=identity] - The function invoked per iteration to generate the keys.
 * @returns {Object} - Returns the composed aggregate object.
 */
const groupBy = <T>(
	collection: T[],
	predicate: predicateType<T> = identity
): Object => {
	const { result } = prepareObject({
		collection: collection,
		predicate: predicate,
		operation: prepareObjectTypes.push,
	});
	return result;
};

export default groupBy;
