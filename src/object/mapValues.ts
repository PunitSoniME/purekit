import createPredicate from '../helpers/createPredicate';
import predicateType from '../helpers/predicateType';
import identity from '../util/identity';

/**
 * Creates an object with the same keys as the original object and values generated by running each
 * own enumerable string keyed property of the object through the iteratee function.
 *
 * @since 1.0.0
 * @param {Object} object - The object to iterate over.
 * @param {Function} [iteratee=identity] - The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 *
 * @example
 *
 * const obj = { a: 1, b: 2, c: 3 };
 *
 * const mapped = mapValues(obj, (value, key) => value * 2);
 * console.log(mapped);
 * // => { a: 2, b: 4, c: 6 }
 */
const mapValues = <T>(
	object: any,
	iteratee: predicateType<T> = identity
): Object => {
	const fn = createPredicate(iteratee);

	return Object.entries(object).reduce(
		(acc, [key, value]) => ({
			...acc,
			[key]: (fn as any)(value),
		}),
		{}
	);
};
export default mapValues;
